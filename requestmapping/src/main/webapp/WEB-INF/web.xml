<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--    声明，注册SpringMVC的核心对象DisPatcherServlet
        需要在Tomcat服务器启动后，创建DisPatcherServlet对象的实例

        为什么要创建DisPatcherServlet对象的实例？
        因为在DisPatcherServlet的创建爱你过程中，会同时创建SpringMVC容器对象，
        读取SpringMVC的配置文件，把这个配置文件中的对象都创建好，当用户发起请求时就可以直接使用对象了。

        servlet的初始化会执行init()方法。DisPatcherServlet在init()方法中{
        //创建容器，读取配置文件
        WebApplicationContext ctx=new ClassPathXmlApplicationContext("spring.xml");
        //把容器对象放入到ServletContext中
        getServletContext().setAttribute(key,ctx);
        }

        启动Tomcat报错，Could not open ServletContext resource [/WEB-INF/springmvc-servlet.xml]
        SpringMVC创建容器对象时，读取的配置文件默认是/WEB-INF/<servlet-name>-servlet.xml
-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

<!--        自定义SpringMVC读取的配置文件的位置-->
        <init-param>
<!--            SpringMVC的配置文件的位置的属性-->
            <param-name>contextConfigLocation</param-name>
<!--            指定自定义文件的位置-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

<!--        在Tomcat启动后创建servlet对象
            load-on-startup：表示Tomcat启动后创建对象的顺序，它的值是大于等于0的整数，数值越小，Tomcat创建对象的时间越早
-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
<!--
        使用框架的时候，url-pattern可以使用两种值
        1.使用扩展名方式，语法 *.xxx, xxx是自定义扩展名。常用方式：*.do, *.action, *.mvc等
        http://localhost:8080/springmvc/some.do
        http://localhost:8080/springmvc/other.do

        2.使用斜杠"/"
-->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
</web-app>
